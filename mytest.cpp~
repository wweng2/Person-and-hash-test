// CMSC 341 - Spring 2021 - Project 4
// driver.cpp
// Simple driver program for use with HashTable class
#include "hash.h"
#include <random>

// Using a fixed seed value generates always the same sequence
// of pseudorandom numbers, e.g. reproducing scientific experiments
// here it helps us with testing since the same sequence repeats
std::mt19937 generator(10);// 10 is the fixed seed value

// We distribute the pseudorandom numbers uniformaly within
// the range [1000,99999]
std::uniform_int_distribution<> distribution(1000, 99999);

// The hash function used by HashTable class
unsigned int hashCode(const string str);

// the function to generate random serial numbers
unsigned int vaccineSerial() {return distribution(generator);}

class Tester{ // Tester class to implement test functions
   public:
   Tester(){}
   ~Tester(){}
   private:
};

int main(){
   // We use this temp array to store some data points for later use
   int tempSerials[50] = {0};
   int secondIndex = 0;
   // create a hash table with the size 101, and the hash function hashCode
   HashTable aTable(101,hashCode);
   int temp = 0;
   // checking to see if the condtionals for the m_capacity work and will assign the right ones
   cout<<"Testing the contrutor and its size options"<<endl;

   // minprime
   HashTable bTable(0,hashCode);
   if(bTable.tableSize() == 101){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }
   // maxprime
   HashTable cTable(9999121,hashCode);
   if(cTable.tableSize() != 9999121){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }
   // nonprime number
   HashTable dTable(1000,hashCode);

   if(dTable.tableSize() != 1000){
	cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

   cout<<"Testing the inseration now"<<endl;
   // Testing to see if one inseration works
   dTable.insert(Person("John", 100));
   if(dTable.numEntries() == 1){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }
   
   // Testing to see if none colliding point work
   dTable.insert(Person("ohn", 100));

   if(dTable.numEntries() == 2){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

   // Testing to see if the mulpletiple collding points work and is in the rigth place
   Person test("John", 1000);

   dTable.insert(test);

   if(dTable.numEntries() == 3){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

   // Testing no dulicatess
  
   if(dTable.insert(test) == false){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

   // For the hash table change and probing policy change
      // we insert 50 Person objects with the same key, person's name is the key
   for (int i=0;i<50;i++){
      temp = vaccineSerial();// generates a random number
      if (i%3 == 0){//this saves 17 numbers from the generated numbers for later use
         tempSerials[secondIndex] = temp;
         cout << temp << " was saved for later use." << endl;
         secondIndex++;
      }
      // print the random numbers which are inserted
      cout << "Insertion # " << i << " => " << temp << endl;
      aTable.insert(Person("John", temp));

   }
   cout << "Message: dump after 50 insertions in a table with 101 buckets:" << endl;
   aTable.dump();

   cout<<"Testing the lambda"<<endl;
   //Check if lambad has the right number here

   if(aTable.lambda() != 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }
  
   // check to see if deletedRatios is working fine, when nothing is deleted
   if(aTable.deletedRatio() == 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

   // We insert a data point to change the load factor, this should initiate a rehash
   temp = vaccineSerial();
   cout << "Insertion # 51" << " => " << temp << endl;
   aTable.insert(Person("John", temp));
   cout << "Message: dump after 51st insertion, the rehash should have happended to a table with 211 buckets:" << endl;
   aTable.dump();
      // Checl lambda here agin to see if its fine
   if(aTable.lambda() != 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }


   // check to see if deletedRatios is working fine, when nothing is deleted
   if(aTable.deletedRatio() == 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

// Testing remove one thing
   cout<<"Testing remove"<<endl;
   dTable.remove(test);
// check deelted ratio
   if(dTable.deletedRatio() != 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

// check lambda
   if(dTable.lambda() != 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

// Remove the same thing
   if(dTable.remove(test) == false){
     cout<<"Passed"<<endl;
   }
   else{

     cout<<"Failed"<<endl;
   }
     // remove ing for has table change
// Check set policy as if it works than the cpacity will be different and the probing will be different and the thing will look different
   // Now we remove some data points which were saved in tempSerials array
   // Deleting 13 data points changes the deleteRatio, it should initiate a rehash 
   // Also check the setprob, as it should be in different postions and have a differnent capacity
   for (int i = 0;i<14;i++)
      aTable.remove(Person("John", tempSerials[i]));
   cout << "Message: dump after 14 removes, a rehash should have happened to a table with 157 buckets," << endl;
   cout << "Message: after 13 removals the rehash happens, then the 14th removal will be tagged as DELETED in the new table." << endl;
   aTable.dump();
   cout << endl;  
   //Checking deleted
   
   if(aTable.deletedRatio() != 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

// check lambda
   if(aTable.lambda() != 0){
     cout<<"Passed"<<endl;
   }
   else{
     cout<<"Failed"<<endl;
   }

   return 0;
}

// The implementation of the hash function
// you can copy this function to your mytest.cpp file
unsigned int hashCode(const string str) {
   unsigned int val = 0 ;
   const unsigned int thirtyThree = 33 ;  // magic number from textbook
   for ( int i = 0 ; i < str.length(); i++)
      val = val * thirtyThree + str[i] ;
   return val ;
}

